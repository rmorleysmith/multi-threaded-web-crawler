name: Issue-Re-opened

on:
  issues:
    types: [reopened]

jobs:
  handle-reopen:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_PROJECT_PAT }}
      RELEASE_PROJECT_ID: "PVT_kwHOAnbWOs4A9S3k"
      BACKLOG_PROJECT_ID: "PVT_kwHOAnbWOs4A9S52"
      BACKLOG_NEEDS_TRIAGE_ID: "f75ad846"
      BACKLOG_STATUS_FIELD_ID: "PVTSSF_lAHOAnbWOs4A9S52zgxChRE"
      RELEASE_STATUS_FIELD_ID: "PVTSSF_lAHOAnbWOs4A9S3kzgxCfsA"
      IN_PROGRESS_OPTION_ID: "47fc9ee4"

    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const issueNodeId = context.payload.issue.node_id;

            // Check if Release project is closed
            const { node } = await github.graphql(`
              query($id: ID!) {
                node(id: $id) {
                  ... on ProjectV2 {
                    closed
                  }
                }
              }`, { id: process.env.RELEASE_PROJECT_ID });

            const releaseClosed = node.closed;

            if (releaseClosed) {
              // Add to Backlog with Needs triage
              const { addProjectV2ItemById } = await github.graphql(`
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId,
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `, {
                projectId: process.env.BACKLOG_PROJECT_ID,
                contentId: issueNodeId
              });

              const itemId = addProjectV2ItemById.item.id;

              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `, {
                projectId: process.env.BACKLOG_PROJECT_ID,
                itemId,
                fieldId: process.env.BACKLOG_STATUS_FIELD_ID,
                optionId: process.env.BACKLOG_NEEDS_TRIAGE_ID
              });

            } else {
              // Find item in Release project
              const { node } = await github.graphql(`
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue { id }
                          }
                        }
                      }
                    }
                  }
                }
              `, { projectId: process.env.RELEASE_PROJECT_ID });

              const item = node.items.nodes.find(i => i.content?.id === issueNodeId);
              if (!item) return;

              // Set status to In Progress
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }
              `, {
                projectId: process.env.RELEASE_PROJECT_ID,
                itemId: item.id,
                fieldId: process.env.RELEASE_STATUS_FIELD_ID,
                optionId: process.env.IN_PROGRESS_OPTION_ID
              });
            }
